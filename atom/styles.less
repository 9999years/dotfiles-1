/*
 * Your Stylesheet
 *
 * This stylesheet is loaded when Atom starts up and is reloaded automatically
 * when it is changed.
 *
 * If you are unfamiliar with LESS, you can read more about it here:
 * http://www.lesscss.org
 */

@import "syntax-variables";
@import "ui-variables";

@font-mono: 'Iosevka', 'Pragmata Pro', Monoid, Hasklig, 'Fira Code', Menlo
          , Monaco, Consolas, 'DejaVu Sans Mono', monospace;

/*
    Styles for all text editor windows
 */
atom-text-editor {
    /*
        Font rendering

        These settings enable ligatures and contextual alternate glyphs
        to make Atom render all the available ligatures in typefaces like
        Iosevka, Pragmata Pro, Monoid, and Hasklig.

     */
    text-rendering: optimizeLegibility;
    -webkit-font-feature-settings:
        "liga" on // render ligatures
      , "calt" on // render all "contextual alternate" glyphs
      , "ss08" on // use Iosevka's "Pragmata Pro-like" stylistic set;
      ;
    font-feature-settings: "liga" on, "calt" on, "ss08" on;

    &.editor {
        .syntax-- {
            // turn off ligatures & contextual alternates in regexes
            &string.syntax--quoted,
            &string.syntax--regexp {
              -webkit-font-feature-settings: "liga" off, "calt" off;
            }

            &source.syntax--haskell, &text.syntax--tex.syntax--latex.syntax--haskell,
            &source.c2hs,
            &source.cabal,
            &source.syntax--hsc2hs {
                /*
                    Turn on Iosevka Language-Specific Ligations for Haskell
                 */
                 -webkit-font-feature-settings: "XHS0" on;
                 font-feature-settings: "XHS0" on;
            }

            &source.syntax--scala {
                /*
                    Turn on Iosevka Language-Specific Ligations for Scala
                    (using the Haskell ligation set)
                 */
                 -webkit-font-feature-settings: "XHS0" on;
                 font-feature-settings: "XHS0" on;
            }

            &source.syntax--swift {
                /*
                    Turn on Iosevka Language-Specific Ligations for Swift
                 */
                 -webkit-font-feature-settings:"SWFT" on;
                 font-feature-settings: "SWFT" on;
            }

            &source.syntax--elm {
                /*
                    Turn on Iosevka Language-Specific Ligations for Elm
                 */
                 -webkit-font-feature-settings: "XELM" on;
                 font-feature-settings: "XELM" on;
            }

            &source.syntax--purscript {
                /*
                    Turn on Iosevka Language-Specific Ligations for PureScript
                 */
                 -webkit-font-feature-settings: "PURS" on;
                 font-feature-settings: "PURS" on;
            }
            // &markup.syntax--definition.syntax--rust {
            //     bg-color: #1c2028;
            // }
            // &keyword.syntax--other.syntax--unsafe.syntax--rust {
            //     // make `unsafe` a nice yellow warning color.
            //     color:  #ebcb8b;
            // }
            &storage.syntax--modifier.syntax--lifetime.syntax--rust,
            &entity.syntax--name.syntax--lifetime.syntax--rust {
                // Non-ugly colors for Rust lifetimes
                color:
                    // #ab7967;
                    mix(#0ff, @syntax-text-color, 70%);
            }

            /*
                Rust language-specific settings.

                This mostly just changes a bunch of ugly colors in the
                atom-language-rust package that I don't like.
             */
            //  &meta.syntax--attribute.syntax--rust {
            //      // Change the really disgusting color for attributes to soemthing
            //      // pretty.
            //      color: #65737e !important;
            //  }
            /*
                Fix issue where Atom doesn't render some ligatures in Rust source
             */
            &source.syntax--rust {
                // force Atom to draw ligatures in Rust source
                text-rendering: optimizeLegibility;
                -webkit-font-feature-settings: "liga" on, "calt" on, "ss08" on, "XHS0" on;
                font-feature-settings: "liga" on, "calt" on, "ss08" on, "XHS0" on;
            }
            &keyword.syntax--operator.syntax--rust {
                // force Atom to draw all ligatures in Rust operators
                -webkit-font-feature-settings:
                    "liga" on, "calt" on, "dlig" on, "ss08" on, "XHS0" on !important;
                font-feature-settings: "liga" on, "calt" on, "dlig" on, "ss08" on, "XHS0" on !important;
            }
            // &markup.syntax--definition.syntax--rust {
            //     background-color: inherit;
            //     border: 0px;
            // }
        }

    }


    .keyword {
        text-decoration: bold !important;
    }

    /*
        Custom colors for overly-long lines in git commits
     */
    .git-commit.line-too-long {

        .deprecated {
            color: #d08770;
            text-decoration: none;
        }
        .illegal {
          color: #fff;
          background: #bf616a;
          opacity: 0.9;
        }
    }
}


.title-bar {
  height: 25px;
  visibility: hidden;
}


/*
    tool-bar package
 */
.tool-bar {
    border: 1px solid @tool-panel-background-color;
    background-color: @tool-panel-background-color;

    button.tool-bar-btn {
        background-color: inherit;
    }

    &.tool-bar-horizontal .tool-bar-spacer {
            border-left: 1px solid @text-color-subtle;
    }
}

.theme-one-dark-ui {
    font-face: @font-family;
}

.tree-view.full-menu {
    background-color: @tool-panel-background-color;
}

/*
        tokamak-terminal and platformIO terminal plugins
 */
.tokamak-terminal .xterm,
.platformio-ide-terminal .xterm {
    font-family: "Iosevka Nerd Font";
    background-color: @tool-panel-background-color;

    color: @text-color;

    ::selection {
        background-color: @text-color-highlight;
    }

    .terminal-cursor {
        background-color: @text-color-highlight;
    }
}

/*
        atom-build plugin
 */
.build {
     font-family: @font-mono;

    .output.override-theme {
        // Change output panel colors to match theme colors
        color: @text-color;
        background-color: @tool-panel-background-color;
    }
 }
